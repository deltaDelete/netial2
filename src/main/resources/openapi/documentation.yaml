openapi: "3.0.0"
info:
  title: "Netial API"
  description: "Netial API"
  version: "1.0.0"
servers:
  - url: "https://netial.deltadelete.ru"
  - url: "http://localhost:8080"
  - url: "https://localhost:8443"
security:
  - bearerAuth: []
paths:
  /login:
    post:
      description: ""
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/UserError"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Неверное имя пользователя или пароль"
                    statusCode: "null"
                Example#2:
                  description: ""
                  value:
                    message: "Пользователь с этим именем не найден"
                    statusCode: "null"
                Example#3:
                  description: ""
                  value:
                    message: "Wrong content type"
                    statusCode: "null"
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/JWTResponse"
  /protected:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "string"
  /error:
    get:
      description: "Endpoint for testing json representation of errors"
      responses:
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
            'application/json':
              schema:
                $ref: "#/components/schemas/ExceptionError"
  /image:
    get:
      description: ""
      parameters:
      - name: "location"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/UserError"
              examples:
                Example#1:
                  description: ""
                  value:
                    message: "Missing 'location' parameter"
                    statusCode: "null"
        "200":
          description: "OK <br> A file response"
          content:
            application/*:
              schema:
                type: "object"
                format: "binary"
  /ws:
    get:
      description: ""
      parameters:
      - name: "Connection"
        in: "header"
        required: true
        description: "Websocket Connection parameter"
        schema:
          type: "string"
      - name: "Upgrade"
        in: "header"
        required: true
        description: "Websocket Upgrade parameter"
        schema:
          type: "string"
      - name: "Sec-WebSocket-Key"
        in: "header"
        required: true
        description: "Websocket Sec-WebSocket-Key parameter"
        schema:
          type: "string"
      responses:
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: "string"
            Upgrade:
              required: true
              schema:
                type: "string"
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: "string"
  /comments:
    get:
      description: "GET: Get all comments"
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "number"
      - name: "pageSize"
        in: "query"
        required: false
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CommentDto"
    post:
      description: "POST: Create new comment"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            'application/json':
              schema:
                type: "object"
              examples:
                Example#1:
                  value: "Invalid user id in body"
                Example#2:
                  value: "Invalid user"
        "403":
          description: "Forbidden"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "You don't have permission to create this comment"
        "201":
          description: "Created"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CommentDto"
  /comments/{id}:
    delete:
      description: "DELETE: Delete comment"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "400":
          description: "Bad Request"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid user"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
            'application/json':
              schema:
                $ref: "#/components/schemas/ExceptionError"
        "404":
          description: "Not Found"
          content:
            'application/json':
              schema:
                type: "object"
        "403":
          description: "Forbidden"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "You don't have permission to delete this comment"
        "204":
          description: "No Content"
          content:
            'application/json':
              schema:
                type: "object"
    get:
      description: "GET: Get comment by id"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
            'application/json':
              schema:
                $ref: "#/components/schemas/ExceptionError"
        "404":
          description: "Not Found"
          content:
            'application/json':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CommentDto"
    put:
      description: "PUT: Update comment text"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "400":
          description: "Bad Request"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid user"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
            'application/json':
              schema:
                $ref: "#/components/schemas/ExceptionError"
        "404":
          description: "Not Found"
          content:
            'application/json':
              schema:
                type: "object"
        "403":
          description: "Forbidden"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "You don't have permission to modify this comment"
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CommentDto"
  /register:
    post:
      description: "Register user"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/UserRegister"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            'application/json':
              schema:
                type: "integer"
                format: "int64"
  /users:
    get:
      description: "Get list of users"
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "number"
      - name: "pageSize"
        in: "query"
        required: false
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserDto"
    post:
      description: "Create user"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/UserRegister"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            'application/json':
              schema:
                type: "integer"
                format: "int64"
  /users/{id}:
    delete:
      description: "Delete user"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "403":
          description: "Forbidden"
          content:
            'application/json':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "object"
    get:
      description: "Get user info"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/UserDto"
        "404":
          description: "Not Found"
          content:
            'application/json':
              schema:
                type: "object"
    put:
      description: "Update user"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/UserDto"
        required: true
      responses:
        "403":
          description: "Forbidden"
          content:
            'application/json':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "object"
  /posts:
    get:
      description: "GET: Get all posts"
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "number"
      - name: "pageSize"
        in: "query"
        required: false
        schema:
          type: "integer"
      - name: "isArticle"
        in: "query"
        required: false
        schema:
          type: "boolean"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PostDto"
    post:
      description: "POST: Create post"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid user id in body"
                Example#2:
                  value: "Invalid user"
        "403":
          description: "Forbidden"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "You don't have permission to create this post"
        "201":
          description: "Created"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PostDto"
  /posts/{id}:
    delete:
      description: "DELETE: Delete post"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "400":
          description: "Bad Request"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid user"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
            'application/json':
              schema:
                $ref: "#/components/schemas/ExceptionError"
        "404":
          description: "Not Found"
          content:
            'application/json':
              schema:
                type: "object"
        "403":
          description: "Forbidden"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "You don't have permission to delete this post"
        "204":
          description: "No Content"
          content:
            'application/json':
              schema:
                type: "object"
    get:
      description: "GET: Get post by id"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
            'application/json':
              schema:
                $ref: "#/components/schemas/ExceptionError"
        "404":
          description: "Not Found"
          content:
            'application/json':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PostDto"
    put:
      description: "PUT: Update post text"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "400":
          description: "Bad Request"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid user"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
            'application/json':
              schema:
                $ref: "#/components/schemas/ExceptionError"
        "404":
          description: "Not Found"
          content:
            'application/json':
              schema:
                type: "object"
        "403":
          description: "Forbidden"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "You don't have permission to modify this post"
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PostDto"
  /groups:
    get:
      description: "GET: Get all groups"
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "number"
      - name: "pageSize"
        in: "query"
        required: false
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/GroupDto"
    post:
      description: "POST: Create group"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid user"
        "403":
          description: "Forbidden"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "You don't have permission to create groups"
        "201":
          description: "Created"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/GroupDto"
  /groups/{id}:
    delete:
      description: "DELETE: Delete group"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "400":
          description: "Bad Request"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid user"
        "403":
          description: "Forbidden"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "You don't have permission to delete groups"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
            'application/json':
              schema:
                $ref: "#/components/schemas/ExceptionError"
        "404":
          description: "Not Found"
          content:
            'application/json':
              schema:
                type: "object"
        "204":
          description: "No Content"
          content:
            'application/json':
              schema:
                type: "object"
    get:
      description: "GET: Get group by id"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
            'application/json':
              schema:
                $ref: "#/components/schemas/ExceptionError"
        "404":
          description: "Not Found"
          content:
            'application/json':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/GroupDto"
    put:
      description: "PUT: Update group"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid user"
        "403":
          description: "Forbidden"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "You don't have permission to modify groups"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
            'application/json':
              schema:
                $ref: "#/components/schemas/ExceptionError"
        "404":
          description: "Not Found"
          content:
            'application/json':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/GroupDto"
components:
  securitySchemes:
    bearerAuth:
      type: http
      description: "JWT Authentication"
      scheme: bearer
      bearerFormat: JWT
  schemas:
    HttpStatusCode:
      type: "object"
      properties:
        value:
          type: "integer"
          format: "int32"
        description:
          type: "string"
      required:
      - "description"
    UserError:
      type: "object"
      properties:
        message:
          type: "string"
        statusCode:
          $ref: "#/components/schemas/HttpStatusCode"
      required:
      - "message"
      - "statusCode"
    LoginRequest:
      type: "object"
      properties:
        userName:
          type: "string"
        password:
          type: "string"
      required:
      - "userName"
      - "password"
    JWTResponse:
      type: "object"
      properties:
        token:
          type: "string"
      required:
      - "token"
    StackTraceElement:
      type: "object"
      properties:
        classLoaderName:
          type: "string"
        moduleName:
          type: "string"
        moduleVersion:
          type: "string"
        methodName:
          type: "string"
        fileName:
          type: "string"
        lineNumber:
          type: "integer"
          format: "int32"
    Throwable:
      type: "object"
      properties:
        cause:
          $ref: "#/components/schemas/Throwable"
        stackTrace:
          type: "array"
          items:
            $ref: "#/components/schemas/StackTraceElement"
    ExceptionError:
      type: "object"
      properties:
        exception:
          $ref: "#/components/schemas/Throwable"
        message:
          type: "string"
        statusCode:
          $ref: "#/components/schemas/HttpStatusCode"
      required:
      - "exception"
      - "message"
      - "statusCode"
    Instant:
      type: "object"
      properties: {}
    UserDto:
      type: "object"
      properties:
        lastName:
          type: "string"
        firstName:
          type: "string"
        birthDate:
          $ref: "#/components/schemas/Instant"
        userName:
          type: "string"
        email:
          type: "string"
        lastLoginDate:
          $ref: "#/components/schemas/Instant"
        creationDate:
          $ref: "#/components/schemas/Instant"
        deletionDate:
          $ref: "#/components/schemas/Instant"
        id:
          type: "integer"
          format: "int64"
      required:
      - "lastName"
      - "firstName"
      - "birthDate"
      - "userName"
      - "email"
      - "lastLoginDate"
      - "creationDate"
    Object:
      type: "object"
      properties: {}
    ResultRow:
      type: "object"
      properties:
        fieldIndex:
          type: "object"
      required:
      - "fieldIndex"
    Post:
      type: "object"
      properties:
        writeValues:
          $ref: "#/components/schemas/Object"
        _readValues:
          $ref: "#/components/schemas/ResultRow"
      required:
      - "id"
      - "writeValues"
    CommentDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        text:
          type: "string"
        user:
          $ref: "#/components/schemas/UserDto"
        post:
          $ref: "#/components/schemas/Post"
        likes:
          type: "integer"
          format: "int32"
      required:
      - "text"
      - "user"
      - "post"
    CommentRequest:
      type: "object"
      properties:
        text:
          type: "string"
        postId:
          type: "integer"
          format: "int64"
        user:
          type: "integer"
          format: "int64"
      required:
      - "text"
    UserRegister:
      type: "object"
      properties:
        password:
          type: "string"
        lastName:
          type: "string"
        firstName:
          type: "string"
        birthDate:
          $ref: "#/components/schemas/Instant"
        userName:
          type: "string"
        email:
          type: "string"
        lastLoginDate:
          $ref: "#/components/schemas/Instant"
        creationDate:
          $ref: "#/components/schemas/Instant"
        deletionDate:
          $ref: "#/components/schemas/Instant"
        id:
          type: "integer"
          format: "int64"
      required:
      - "password"
      - "lastName"
      - "firstName"
      - "birthDate"
      - "userName"
      - "email"
      - "lastLoginDate"
      - "creationDate"
    PostDto:
      type: "object"
      properties:
        text:
          type: "string"
        user:
          $ref: "#/components/schemas/UserDto"
        likes:
          type: "integer"
          format: "int32"
        comments:
          type: "integer"
          format: "int32"
        creationDate:
          $ref: "#/components/schemas/Instant"
        deletionDate:
          $ref: "#/components/schemas/Instant"
        id:
          type: "integer"
          format: "int64"
      required:
      - "text"
      - "user"
      - "creationDate"
    PostRequest:
      type: "object"
      properties:
        text:
          type: "string"
        user:
          type: "integer"
          format: "int64"
      required:
      - "text"
    GroupDto:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        year:
          type: "integer"
          format: "int32"
        id:
          type: "integer"
          format: "int64"
      required:
      - "name"
      - "description"
    GroupRequest:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        year:
          type: "integer"
          format: "int32"
      required:
      - "name"
      - "description"